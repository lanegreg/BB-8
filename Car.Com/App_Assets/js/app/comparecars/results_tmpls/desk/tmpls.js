module.exports.add_change_car_overlay=function anonymous(it
/**/) {
var out='<div id="add_change_car_overlay_js" class="overlay overlay-dk max-450" style="display:none"> <button type="button" class="overlay-close"> <span class="icon"> <svg> <use xlink:href="/assets/svg/global-sprite.svg#i_close"></use> </svg> </span> </button> <div class="dead-middle"> <h1>Add / Change Car</h1> <section class="add-change-car-container" id="" style="display: block"> <form> <p> <label> <select id="compareCarMakeSelect" class="full"> <option value="">Select a Make</option> ';var arr1=it.makeArr;if(arr1){var makeItem,midx=-1,l1=arr1.length-1;while(midx<l1){makeItem=arr1[midx+=1];out+=' <option value="'+(makeItem.seo_name)+'">'+(makeItem.name)+'</option> ';} } out+=' </select> </label> </p> <p> <label> <select id="compareCarModelSelect" class="full" disabled="disabled"> <option value="">Select a Model</option> </select> </label> </p> <p> <label> <select id="compareCarTrimSelect" class="full" disabled="disabled"> <option value="">Select a Vehicle</option> </select> </label> </p> </form> </section> </div></div>';return out;
};module.exports.compare_customize=function anonymous(it
/**/) {
var out=''; var selectedOverviewArr = it.selItemArr, pricingNameArr = ["Invoice Price", "MSRP"], convNameArr = ["Front A/C","Rear A/C","Power Windows","Tilt Steering","Cruise Control","Leather Seats","Driver Seat Power","Sunroof","Rear View Camera","Navigation","Bluetooth"], perfNameArr = ["Engine","Drive","Transmission","Horsepower","Torque","Fuel Capacity","Fuel Type","MPG","Towing Capacity"], dimNameArr = ["Seating Capacity","Cargo Capacity","Max Cargo","Doors","Bed Length"], overviewNameArr = ["Invoice Price", "MSRP","Front A/C","Rear A/C","Power Windows","Tilt Steering","Cruise Control","Leather Seats","Driver Seat Power", "Sunroof","Rear View Camera","Navigation","Bluetooth","Engine","Drive","Transmission","Horsepower","Torque","Fuel Capacity","Fuel Type","MPG","Towing Capacity", "Seating Capacity","Cargo Capacity","Max Cargo","Doors","Bed Length"], replaceMultSpace = new RegExp(' ', 'g');out+=' <div class="col1" style="display: none"> <section class="compare-tag-list"> <ul> ';var arr1=overviewNameArr;if(arr1){var selectedItem,Selidx=-1,l1=arr1.length-1;while(Selidx<l1){selectedItem=arr1[Selidx+=1];out+=' ';if(selectedOverviewArr.indexOf(selectedItem) > -1){out+=' <li id="selectedOverview_'+(selectedItem.replace(replaceMultSpace,'-').replace('/','-'))+'"> ';}else if(true){out+=' <li id="selectedOverview_'+(selectedItem.replace(replaceMultSpace,'-').replace('/','-'))+'" style="display: none;"> ';}out+=' <button class="btn-search-tag js_delete_custom_overview" data-custitem="'+(selectedItem)+'"> '+(selectedItem)+' <span class="icon"> <svg> <use xlink:href="/assets/svg/global-sprite.svg#i_close"></use> </svg> </span> </button> </li> ';} } out+=' </ul> </section> </div>   <div class="wrap"> <section class="compare-tag-list"> <ul> <li> <h2 class="h2">Pricing</h2> <ul class="inline-block-list"> ';var arr2=pricingNameArr;if(arr2){var priceItem,Priidx=-1,l2=arr2.length-1;while(Priidx<l2){priceItem=arr2[Priidx+=1];out+=' <li id="addOverview_'+(priceItem.replace(replaceMultSpace,'-').replace('/','-'))+'" ';if(selectedOverviewArr.indexOf(priceItem) > -1){out+='class="selected"';}out+='> <button class="btn-default-ovl js_toggle_custom_overview" data-custitem="'+(priceItem)+'"> '+(priceItem)+' </button> </li> ';} } out+=' </ul> </li> <li> <h2 class="h2">Convenience</h2> <ul class="inline-block-list"> ';var arr3=convNameArr;if(arr3){var convItem,convidx=-1,l3=arr3.length-1;while(convidx<l3){convItem=arr3[convidx+=1];out+=' <li id="addOverview_'+(convItem.replace(replaceMultSpace,'-').replace('/','-'))+'" ';if(selectedOverviewArr.indexOf(convItem) > -1){out+='class="selected"';}out+='> <button class="btn-default-ovl js_toggle_custom_overview" data-custitem="'+(convItem)+'"> '+(convItem)+' </button> </li> ';} } out+=' </ul> </li> <li> <h2 class="h2">Performance</h2> <ul class="inline-block-list"> ';var arr4=perfNameArr;if(arr4){var perfItem,perfidx=-1,l4=arr4.length-1;while(perfidx<l4){perfItem=arr4[perfidx+=1];out+=' <li id="addOverview_'+(perfItem.replace(replaceMultSpace,'-').replace('/','-'))+'" ';if(selectedOverviewArr.indexOf(perfItem) > -1){out+='class="selected"';}out+='> <button class="btn-default-ovl js_toggle_custom_overview" data-custitem="'+(perfItem)+'"> '+(perfItem)+' </button> </li> ';} } out+=' </ul> </li> <li> <h2 class="h2">Dimensions</h2> <ul class="inline-block-list"> ';var arr5=dimNameArr;if(arr5){var dimItem,dimidx=-1,l5=arr5.length-1;while(dimidx<l5){dimItem=arr5[dimidx+=1];out+=' <li id="addOverview_'+(dimItem.replace(replaceMultSpace,'-').replace('/','-'))+'" ';if(selectedOverviewArr.indexOf(dimItem) > -1){out+='class="selected"';}out+='> <button class="btn-default-ovl js_toggle_custom_overview" data-custitem="'+(dimItem)+'"> '+(dimItem)+' </button> </li> ';} } out+=' </ul> </li> </ul> </section>  <p class="center">  <button class="btn-primary js_update_custom_overview"> <span class="icon inline"> <svg> <use xlink:href="/assets/svg/global-sprite.svg#i_arrow3_l"></use> </svg> </span> Update </button> </p> </div>';return out;
};module.exports.compare_data=function anonymous(it
/**/) {
var out=''; var foundItem = false, carIndx = 0, specIndx = 0, notAvailable = "N/A", maxCompareNum = 11, carCount = 0, carsArr = [], carInputArr = it.carArr[0], selectedOverviewArr = it.carArr[1], sortbyValues = it.carArr[2].split(","), sortbyCurrentItem = sortbyValues[0], sortbyCurrentFunc = "", sortbyCurrentChangeFunc = "", InvoiceName = "Invoice Price", MSRPName = "MSRP", HorsepowerName = "Horsepower", SeatingCapName = "Seating Capacity", TowingCapName = "Towing Capacity", MaxCargoName = "Max Cargo", CargoCapName = "Cargo Capacity", FuleCapName = "Fuel Capacity", DoorsName = "Doors", BedLengthName = "Bed Length", FuelTypeName = "Fuel Type",    canSortByNameArr = [InvoiceName,MSRPName,HorsepowerName,SeatingCapName,TowingCapName,MaxCargoName,CargoCapName,FuleCapName,DoorsName,BedLengthName], sortByFunctionArr = ["LH","LH","HL","HL","HL","HL","HL","HL","HL","HL"],   genItemArr = ["name", "invoice", "msrp"], genNameArr = ["Trim", InvoiceName, MSRPName], genValArr = [],   overviewItemArr = ["MPG", FuelTypeName,FuleCapName,"Engine","Driven Wheels","Number of speeds,Transmission",HorsepowerName,"Torque,Max Torque RPM","Front air conditioning","Power windows", "Steering wheel","Cruise control","Upholstery","Power Adjustments","Sunroof","Exterior Rear View Camera,Exterior Parking Camera","Navigation system","wireless phone connectivity", TowingCapName,"seating capacity","Cargo capacity, all seats in place","Max cargo capacity","Overall Length",DoorsName,"Roof type","Bed Length Measurement","Rear air conditioning"], overviewNameArr = ["MPG", FuelTypeName,FuleCapName,"Engine","Drive","Transmission",HorsepowerName,"Torque","Front A/C","Power Windows", "Tilt Steering","Cruise Control","Leather Seats","Driver Seat Power","Sunroof","Rear View Camera","Navigation","Bluetooth", TowingCapName,SeatingCapName,CargoCapName,MaxCargoName,"Overall Length",DoorsName,"Roof Type",BedLengthName,"Rear A/C"], overviewGroupArr = ["","","","","","","","","","","","","","Driver Seat","","","","","","","","","","","","","",""], overviewSpecArr = [1,2,4,5,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26], overviewValArr = [], overviewItSplitArr = [], overviewItSplitArrSkip = ["Cargo capacity, all seats in place"], overviewItSplitIndx = 0, overviewBestValNameArr = [InvoiceName,MSRPName,HorsepowerName,SeatingCapName,TowingCapName,MaxCargoName,CargoCapName,FuleCapName,DoorsName,BedLengthName], overviewBestFunction = ["LH","LH","HL","HL","HL","HL","HL","HL","HL","HL"], overviewBestValArr = ["","","","","","","","","",""],   audioItemArr = ["Audio/Video Remote Control" , "Memory Card Slot", "MP3 player", "Radio", "Satellite Radio", "Total Number of Speakers"], audioNameArr = ["A/V Remote Control " , "Memory Card Slot", "MP3 player", "Radio", "Satellite Radio", "# Speakers"], audioSpecArr = [0,1,2,3,4,5], audioGroupArr = ["Audio System"], audioValArr = [],   comfortItemArr_1 = ["Front air conditioning", "Front air conditioning zones", "Rear air conditioning", "Rear air conditioning zones", "Heated steering wheel", "Reading lights", "AC power outlet", "Adjustable pedals", "Audio controls on steering wheel", "Cruise control", "Power Activated Trunk/Hatch", "Steering Wheel Phone Controls",  "Liftgate window", "includes HVAC", "seat memory", "seating capacity"], comfortNameArr_1 = ["Front A/C", "Front A/C Zones", "Rear A/C", "Rear A/C Zones ", "Heated steering wheel", "Reading lights", "AC Outlet", "Adj. Pedals", "Streering Wheel Controls", "Cruise control", "Power Trunk", "Phone Controls ", "Liftgate window", "HVAC", "seat memory", "Max Seats"], comfortGroupArr_1 = ["Air Conditioning","Comfort Features","Convenience Features",DoorsName,"Memorized Settings","Seats"], comfortValArr_1 = [],  comfortItemArr_2 = ["Adjustable lumbar support", "Heated", "Power Adjustments"], comfortNameArr_2 = ["Lumbar Support", "Heated Driver Seat", "Driver Seat Power"], comfortGroupArr_2 = ["Driver Seat"], comfortValArr_2 = [], comfortItemArr_3 = ["Heated", "Power adjustments"], comfortNameArr_3 = ["Heated Passenger Seat", "Passenger Seat Power"], comfortGroupArr_3 = ["Passenger Seat"], comfortValArr_3 = [],  comfortItemArr_4 = ["Center armrest", "Climate controlled", "Folding", "Heated", "Rear heat", "Reclining"], comfortNameArr_4 = ["Rear Seats Center armrest", "Rear Climate Controlled", "Folding Rear Seats", "Heated Rear Seats", "Rear heat", "Reclining Rear Seats"], comfortGroupArr_4 = ["Rear Seats"], comfortValArr_4 = [], comfortSpecArr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],   dimItemArr = ["Bed Length Measurement","Front Head Room","Front Leg Room","Overall height","Overall Length","Overall Width","Rear Head Room","Rear Leg Room","Wheelbase"], dimNameArr = [BedLengthName,"Front Head Room","Front Leg Room","Overall height","Overall Length","Overall Width","Rear Head Room","Rear Leg Room","Wheelbase"], dimSpecArr = [0,1,2,3,4,5,6,7,8], dimGroupArr = ["Dimensions"], dimValArr = [],   engineItemArr = ["Cylinders","Size","Total Valves",FuelTypeName,"Horse Power","Electric Motor","Electric Motor Battery Type","Hybrid Gas Engine","Keyless Ignition","Remote engine start","Type"], engineNameArr = ["Cylinders","Size","Total Valves",FuelTypeName,HorsepowerName,"Electric Motor","Battery Type","Hybrid Gas Engine","Keyless Ignition","Remote Start","Type"], engineSpecArr = [0,1,2,3,4,5,6,7,8,9,10], engineGroupArr = ["Engine"], engineValArr = [],   feconItemArr = ["City", "Highway"], feconNameArr = ["City", "Highway"], feconSpecArr = [0,1], feconValArr = [],   gaugeItemArr = ["Clock","Compass","External temp","Head-up display","Lane Departure Warning","Tachometer","Transmission Temperature Guage","Trip computer"], gaugeNameArr = ["Clock","Compass","External temp","Head-up display","Lane Departure","Tachometer","Trans Temp","Trip computer"], gaugeSpecArr = [0,1,2,3,4,5,6,7], gaugeValArr = [],   lightsItemArr = ["Daytime running lights","Front Fog lights","Headlights dusk sensor","Xenon Headlights"], lightsNameArr = ["DTRL","Fog Lights","Auto Headlights","Xenon Headlights"], lightsSpecArr = [0,1,2,3], lightsValArr = [],   perfItemArr = ["Acceleration 0-60mph","Torque"], perfNameArr = ["0-60mph","Torque"], perfSpecArr = [0,1], perfValArr = [],   safetyItemArr = ["ABS","Driver Airbag","Head airbags","Knee airbags","Passenger Airbag","Passenger airbag deactivation","Child safety locks","Child seat","Antilock Brakes","Child safety seat"], safetyNameArr = ["ABS","Driver Airbag","Head airbags","Knee airbags","Passenger Airbag","Passenger airbag deactivation","Child safety locks","Child seat","Antilock Brakes","Child safety seat"], safetySpecArr = [0,1,2,3,4,5,6,7,8,9], safetyValArr = [],   wheelsItemArr_1 = ["Diameter","Run flat","Tire Pressure Monitoring System","Type","Width"], wheelsNameArr_1 = ["Tire Diameter","Run flat","Pressure Monitoring","Tire Type","Tire Width"], wheelsGroupArr_1 = ["Tires"], wheelsValArr_1 = [],  wheelsItemArr_2 = ["Diameter","Rim Type", "Width"], wheelsNameArr_2 = ["Wheel Diameter","Rim Type", "Wheel Width"], wheelsGroupArr_2 = ["Wheels", "Wheels, Front Size"], wheelsValArr_2 = [], wheelsSpecArr = [0,1,2,3,4,5,6,7,8,9],    standopItemArr = ["Front air conditioning", "Power windows", "Steering wheel", "Cruise control", "Upholstery", "Power Adjustments", "Tachometer", "Rear defogger", "Radio", "In-Dash CD", "Sunroof", "Adjustable pedals", "Exterior Rear View Camera", "Compass", "External temp", "Trip computer", "seat memory", "Stability control", "Traction control", "Anti-theft alarm system", "Navigation system", "wireless connectivity" ], standopNameArr = ["Air Conditioning", "Power Windows", "Tilt Steering", "Cruise Control", "Leather Seats", "Power Seats", "Tachometer", "Rear Defroster", "AM/FM Radio", "CD Player", "Sunroof", "Adjustable Pedals", "Rear View Camera", "Compass", "External Temp", "Trip Computer", "Seat Memory", "Stability Control", "Traction Control", "Alarm", "Navigation System", "Bluetooth" ], standopSpecArr = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21], standopValArr = [], standopItSplitArr = [], standopItSplitIndx = 0;    if(sortbyValues.length > 1) { sortbyCurrentFunc = sortbyValues[1]; if(sortbyCurrentFunc == "LH") { sortbyCurrentChangeFunc = "HL"; } else { sortbyCurrentChangeFunc = "LH"; } }   for(carCount=0; carCount<carInputArr.length && carCount<maxCompareNum; carCount++) { carsArr[carCount] = carCount; }   for(var genItIndx=0; genItIndx<genItemArr.length; genItIndx++) { genValArr[genItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { genValArr[genItIndx][carIndx] = []; genValArr[genItIndx][carIndx] = carInputArr[carIndx][genItemArr[genItIndx]]; } }   for(var overviewItIndx=0; overviewItIndx<overviewItemArr.length; overviewItIndx++) { overviewValArr[overviewItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { overviewValArr[overviewItIndx][carIndx] = []; if(overviewSpecArr.indexOf(overviewItIndx) > -1) { foundItem = false; if(overviewItSplitArrSkip.indexOf(overviewItemArr[overviewItIndx]) > -1) { while (overviewItSplitArr.pop()) {}; overviewItSplitArr[0] = overviewItemArr[overviewItIndx]; } else { overviewItSplitArr = overviewItemArr[overviewItIndx].split(","); } for(overviewItSplitIndx=0; overviewItSplitIndx<overviewItSplitArr.length; overviewItSplitIndx++) { for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == overviewItSplitArr[overviewItSplitIndx] &&  (overviewGroupArr[overviewItIndx].length === 0 || overviewGroupArr[overviewItIndx] == carInputArr[carIndx].specifications[specIndx].group)) { foundItem = true; overviewValArr[overviewItIndx][carIndx] = overviewValArr[overviewItIndx][carIndx] + ' ' + carInputArr[carIndx].specifications[specIndx].data; if(overviewItSplitArr[overviewItSplitIndx] == "Number of speeds") { overviewValArr[overviewItIndx][carIndx] = overviewValArr[overviewItIndx][carIndx] + ' Speed'; } if(overviewItSplitArr[overviewItSplitIndx] == "Torque") { overviewValArr[overviewItIndx][carIndx] = overviewValArr[overviewItIndx][carIndx] + ' @'; } break; } } } if(!foundItem) { overviewValArr[overviewItIndx][carIndx] = notAvailable; } } } }    for(carIndx=0; carIndx<carCount; carIndx++) { overviewValArr[0][carIndx] = carInputArr[carIndx].city_mpg + ' City / ' + carInputArr[carIndx].highway_mpg + ' Hwy'; overviewValArr[3][carIndx] = carInputArr[carIndx].engine_size + 'L ' + carInputArr[carIndx].engine_type; overviewValArr[6][carIndx] = carInputArr[carIndx].horsepower.replace(" hp", ""); }   overviewNameArr = genNameArr.concat(overviewNameArr);  overviewValArr = genValArr.concat(overviewValArr);    var  bestValIndx = -1, bestOverviewItemValArray = [], bestItemFuncType = ''; for(var bestItIndx=0; bestItIndx<overviewBestValNameArr.length; bestItIndx++) { bestValIndx = overviewNameArr.indexOf(overviewBestValNameArr[bestItIndx]); if (bestValIndx >= 0) { while (bestOverviewItemValArray.pop()) {}; for(carIndx=0; carIndx<carCount; carIndx++) { bestOverviewItemValArray[carIndx] = overviewValArr[bestValIndx][carIndx].replace(/\D/g,''); } bestItemFuncType = overviewBestFunction[bestItIndx]; if(bestItemFuncType == 'LH') bestOverviewItemValArray = bestOverviewItemValArray.sort(function(a, b){return a-b}); else bestOverviewItemValArray = bestOverviewItemValArray.sort(function(a, b){return b-a}); overviewBestValArr[bestItIndx] = bestOverviewItemValArray[0]; } }   for(var audioItIndx=0; audioItIndx<audioItemArr.length; audioItIndx++) { audioValArr[audioItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { audioValArr[audioItIndx][carIndx] = []; if(audioSpecArr.indexOf(audioItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == audioItemArr[audioItIndx] && audioGroupArr.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; audioValArr[audioItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { audioValArr[audioItIndx][carIndx] = notAvailable; } } } }     var comfortItIndx = 0; for(comfortItIndx=0; comfortItIndx<comfortItemArr_1.length; comfortItIndx++) { comfortValArr_1[comfortItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { comfortValArr_1[comfortItIndx][carIndx] = []; if(comfortSpecArr.indexOf(comfortItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == comfortItemArr_1[comfortItIndx] && comfortGroupArr_1.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; comfortValArr_1[comfortItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { comfortValArr_1[comfortItIndx][carIndx] = notAvailable; } } } }  for(comfortItIndx=0; comfortItIndx<comfortItemArr_2.length; comfortItIndx++) { comfortValArr_2[comfortItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { comfortValArr_2[comfortItIndx][carIndx] = []; if(comfortSpecArr.indexOf(comfortItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == comfortItemArr_2[comfortItIndx] && comfortGroupArr_2.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; comfortValArr_2[comfortItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { comfortValArr_2[comfortItIndx][carIndx] = notAvailable; } } } }  for(comfortItIndx=0; comfortItIndx<comfortItemArr_3.length; comfortItIndx++) { comfortValArr_3[comfortItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { comfortValArr_3[comfortItIndx][carIndx] = []; if(comfortSpecArr.indexOf(comfortItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == comfortItemArr_3[comfortItIndx] && comfortGroupArr_3.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; comfortValArr_3[comfortItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { comfortValArr_3[comfortItIndx][carIndx] = notAvailable; } } } }  for(comfortItIndx=0; comfortItIndx<comfortItemArr_4.length; comfortItIndx++) { comfortValArr_4[comfortItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { comfortValArr_4[comfortItIndx][carIndx] = []; if(comfortSpecArr.indexOf(comfortItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == comfortItemArr_4[comfortItIndx] && comfortGroupArr_4.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; comfortValArr_4[comfortItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { comfortValArr_4[comfortItIndx][carIndx] = notAvailable; } } } }    for(var dimItIndx=0; dimItIndx<dimItemArr.length; dimItIndx++) { dimValArr[dimItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { dimValArr[dimItIndx][carIndx] = []; if(dimSpecArr.indexOf(dimItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == dimItemArr[dimItIndx] && dimGroupArr.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; dimValArr[dimItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { dimValArr[dimItIndx][carIndx] = notAvailable; } } } }     for(var engineItIndx=0; engineItIndx<engineItemArr.length; engineItIndx++) { engineValArr[engineItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { engineValArr[engineItIndx][carIndx] = []; if(engineSpecArr.indexOf(engineItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == engineItemArr[engineItIndx] && engineGroupArr.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; engineValArr[engineItIndx][carIndx] = engineValArr[engineItIndx][carIndx] + ' ' + carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { engineValArr[engineItIndx][carIndx] = notAvailable; } } } }    for(var feconItIndx=0; feconItIndx<feconItemArr.length; feconItIndx++) { feconValArr[feconItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { feconValArr[feconItIndx][carIndx] = []; if(feconSpecArr.indexOf(feconItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == feconItemArr[feconItIndx]) { foundItem = true; feconValArr[feconItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { feconValArr[feconItIndx][carIndx] = notAvailable; } } } }   for(var gaugeItIndx=0; gaugeItIndx<gaugeItemArr.length; gaugeItIndx++) { gaugeValArr[gaugeItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { gaugeValArr[gaugeItIndx][carIndx] = []; if(gaugeSpecArr.indexOf(gaugeItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == gaugeItemArr[gaugeItIndx]) { foundItem = true; gaugeValArr[gaugeItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { gaugeValArr[gaugeItIndx][carIndx] = notAvailable; } } } }   for(var lightsItIndx=0; lightsItIndx<lightsItemArr.length; lightsItIndx++) { lightsValArr[lightsItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { lightsValArr[lightsItIndx][carIndx] = []; if(lightsSpecArr.indexOf(lightsItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == lightsItemArr[lightsItIndx]) { foundItem = true; lightsValArr[lightsItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { lightsValArr[lightsItIndx][carIndx] = notAvailable; } } } }   for(var perfItIndx=0; perfItIndx<perfItemArr.length; perfItIndx++) { perfValArr[perfItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { perfValArr[perfItIndx][carIndx] = []; if(perfSpecArr.indexOf(perfItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == perfItemArr[perfItIndx]) { foundItem = true; perfValArr[perfItIndx][carIndx] = perfValArr[perfItIndx][carIndx] + ' ' + carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { perfValArr[perfItIndx][carIndx] = notAvailable; } } } }   for(var safetyItIndx=0; safetyItIndx<safetyItemArr.length; safetyItIndx++) { safetyValArr[safetyItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { safetyValArr[safetyItIndx][carIndx] = []; if(safetySpecArr.indexOf(safetyItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == safetyItemArr[safetyItIndx]) { foundItem = true; safetyValArr[safetyItIndx][carIndx] = safetyValArr[safetyItIndx][carIndx] + ' ' + carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { safetyValArr[safetyItIndx][carIndx] = notAvailable; } } } }    var wheelsItIndx = 0; for(wheelsItIndx=0; wheelsItIndx<wheelsItemArr_1.length; wheelsItIndx++) { wheelsValArr_1[wheelsItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { wheelsValArr_1[wheelsItIndx][carIndx] = []; if(wheelsSpecArr.indexOf(wheelsItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == wheelsItemArr_1[wheelsItIndx] && wheelsGroupArr_1.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; wheelsValArr_1[wheelsItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { wheelsValArr_1[wheelsItIndx][carIndx] = notAvailable; } } } } for(wheelsItIndx=0; wheelsItIndx<wheelsItemArr_2.length; wheelsItIndx++) { wheelsValArr_2[wheelsItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { wheelsValArr_2[wheelsItIndx][carIndx] = []; if(wheelsSpecArr.indexOf(wheelsItIndx) > -1) { foundItem = false; for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == wheelsItemArr_2[wheelsItIndx] && wheelsGroupArr_2.indexOf(carInputArr[carIndx].specifications[specIndx].group) > -1) { foundItem = true; wheelsValArr_2[wheelsItIndx][carIndx] = carInputArr[carIndx].specifications[specIndx].data; break; } } if(!foundItem) { wheelsValArr_2[wheelsItIndx][carIndx] = notAvailable; } } } }   for(var standopItIndx=0; standopItIndx<standopItemArr.length; standopItIndx++) { standopValArr[standopItIndx] = []; for(carIndx=0; carIndx<carCount; carIndx++) { standopValArr[standopItIndx][carIndx] = []; if(standopSpecArr.indexOf(standopItIndx) > -1) { foundItem = false; standopItSplitArr = standopItemArr[standopItIndx].split(","); for(standopItSplitIndx=0; standopItSplitIndx<standopItSplitArr.length; standopItSplitIndx++) { for(specIndx=0; specIndx<carInputArr[carIndx].specifications.length; specIndx++) { if(carInputArr[carIndx].specifications[specIndx].title == standopItSplitArr[standopItSplitIndx]) { foundItem = true; if(carInputArr[carIndx].specifications[specIndx].availability == "S") standopValArr[standopItIndx][carIndx] = "Standard"; else standopValArr[standopItIndx][carIndx] = "Optional"; break; } } } if(!foundItem) { standopValArr[standopItIndx][carIndx] = "n/a"; } } } }     if(sortbyCurrentItem && sortbyCurrentItem.length > 0 && overviewNameArr.indexOf(sortbyCurrentItem) > -1) { var sortedValuesArr = [], sortedCarsArr = [], sortType = '', foundSortItem = false, itemNameIndx = 0, carItemValueIndx = 0, sortedValueIndx = 0, sortItemIndex = 0; for(itemNameIndx=0; itemNameIndx<overviewNameArr.length; itemNameIndx++) { if(overviewNameArr[itemNameIndx] == sortbyCurrentItem) { foundSortItem = true; sortItemIndex = itemNameIndx; break; } } if(foundSortItem) { for(carItemValueIndx=0; carItemValueIndx<carsArr.length; carItemValueIndx++) { sortedValuesArr[carItemValueIndx] = overviewValArr[sortItemIndex][carItemValueIndx].replace(/\D/g,''); } if (sortbyCurrentFunc.length > 0) { sortType = sortbyCurrentFunc; } else { sortType = sortByFunctionArr[canSortByNameArr.indexOf(sortbyCurrentItem)]; } if(sortType == 'LH') sortedValuesArr = sortedValuesArr.sort(function(a, b){return a-b}); else sortedValuesArr = sortedValuesArr.sort(function(a, b){return b-a}); for(sortedValueIndx=0; sortedValueIndx<sortedValuesArr.length; sortedValueIndx++){ for(carItemValueIndx=0; carItemValueIndx<carsArr.length; carItemValueIndx++) { if(sortedValuesArr[sortedValueIndx] == overviewValArr[sortItemIndex][carItemValueIndx].replace(/\D/g,'') && sortedCarsArr.indexOf(carItemValueIndx) < 0) { sortedCarsArr.push(carItemValueIndx); } } } for(carItemValueIndx=0; carItemValueIndx<carsArr.length; carItemValueIndx++) { if(sortedCarsArr.indexOf(carItemValueIndx) < 0) { sortedCarsArr.push(carItemValueIndx); } } carsArr = sortedCarsArr; } } out+='<input type="hidden" name="changeCompId" id="changeCompId" value=""><div class="section-pad"> <div class="compare-head-cont"> <table> <tr> <th class="rowhead"> <button class="btn-primary add-car js_add_compare_car" style="top: 3px;">Add a Car</button> </th> ';var arr1=carsArr;if(arr1){var carItem,i1=-1,l1=arr1.length-1;while(i1<l1){carItem=arr1[i1+=1];out+=' <th> <div class="card"> <a class="js_change_delete_toggle" data-trimid="'+(carInputArr[carItem].id)+'" ontouchstart="this.classList.toggle(\'focus\');"> <div class="cm-trigger context-menu"> <span class="icon i-close"> <svg> <use xlink:href="/assets/svg/global-sprite.svg#i_close"></use> </svg> </span> </div> </a> <div id="js_change_delete_section_'+(carInputArr[carItem].id)+'" class="cm-dropdown" style="display: none;"> <ul> <li><button class="btn-minimal js_delete_compare_car" data-trimid="'+(carInputArr[carItem].id)+'">Delete</button></li> <li><button class="btn-minimal js_change_compare_car" data-trimid="'+(carInputArr[carItem].id)+'">Change</button></li> </ul> </div> <a href="/'+(carInputArr[carItem].makeseoname)+'/'+(carInputArr[carItem].super_model_seoname)+'/'+(carInputArr[carItem].year)+'/'+(carInputArr[carItem].seo_name)+'/"> <div class="img-container"> ';if(carInputArr[carItem].images.length > 0){out+=' <picture> <!--[if IE 9]><video style="display: none;"><![endif]--> <source srcset="'+(carInputArr[carItem].images[0].large)+'" media="(min-width: 1024px)" /> <source srcset="'+(carInputArr[carItem].images[0].medium)+'" media="(min-width: 640px)" /> <source srcset="'+(carInputArr[carItem].images[0].small)+'" media="(min-width: 320px)" /> <!--[if IE 9]></video><![endif]--> <img src="'+(carInputArr[carItem].images[0].small)+'" alt="'+(carInputArr[carItem].year)+' '+(carInputArr[carItem].make)+' '+(carInputArr[carItem].model)+'"> </picture> ';}else if(true){out+=' <img src="/assets/svg/no-image-avail.svg" alt="'+(carInputArr[carItem].year)+' '+(carInputArr[carItem].make)+' '+(carInputArr[carItem].model)+'"> ';}out+=' <span class="model-year">'+(carInputArr[carItem].year)+'</span> <span class="hover-content">View Details</span> </div> <div class="ymmt-cont"> <span class="make-model"> '+(carInputArr[carItem].make)+' '+(carInputArr[carItem].model)+' </span> <span class="trim"> '+(carInputArr[carItem].name)+' </span> </div> </a> </div> </th> ';} } out+=' </tr> </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Overview"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Overview" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Overview </h2> <div id="compareSection_Overview" class="compare-data-cont"> <table> <tr class="customize"> <th class="rowhead"> <button id="js_customize_compare_btn" class="cust-button"> <label class="label-1">Customize</label> <label class="label-2"> <span class="icon inline i-pencil"> <svg> <use xlink:href="/assets/svg/global-sprite.svg#i_pencil"></use> </svg> </span> </label> </button> </th> ';var arr2=carsArr;if(arr2){var carItem,i2=-1,l2=arr2.length-1;while(i2<l2){carItem=arr2[i2+=1];out+=' <td><button class="btn-primary js_get_quote_btn" data-year="'+(carInputArr[carItem].year)+'" data-make="'+(carInputArr[carItem].makeseoname)+'" data-supermodel="'+(carInputArr[carItem].super_model_seoname)+'" data-trim="'+(carInputArr[carItem].seo_name)+'">Get Pricing</button></td> ';} } out+=' </tr> ';var arr3=overviewNameArr;if(arr3){var overviewItem,indexOverview=-1,l3=arr3.length-1;while(indexOverview<l3){overviewItem=arr3[indexOverview+=1];out+=' ';if(selectedOverviewArr.indexOf(overviewItem) > -1){out+=' <tr class="js_row_filler"> <th class="rowhead"> <div class="th-filler"> '+(overviewItem)+' ';if(canSortByNameArr.indexOf(overviewItem) > -1){out+=' ';if(sortbyCurrentItem == overviewItem && sortbyCurrentChangeFunc.length > 0){out+=' <a class="js_compare_sortby" data-sortitem="'+(overviewItem + ',' + sortbyCurrentChangeFunc)+'"> ';}else if(true){out+=' <a class="js_compare_sortby" data-sortitem="'+(overviewItem + ',' + sortByFunctionArr[canSortByNameArr.indexOf(overviewItem)])+'"> ';}out+='  <span class="icon inline i-sort"> <svg> <use xlink:href="/assets/svg/global-sprite.svg#i_sort"></use> </svg> </span> </a> ';}out+=' </div> </th> ';var arr4=carsArr;if(arr4){var carItem,i4=-1,l4=arr4.length-1;while(i4<l4){carItem=arr4[i4+=1];out+=' ';if(overviewBestValNameArr.indexOf(overviewItem) >= 0 &&  overviewBestValArr[overviewBestValNameArr.indexOf(overviewItem)].length > 0 && overviewBestValArr[overviewBestValNameArr.indexOf(overviewItem)] == overviewValArr[indexOverview][carItem].replace(/\D/g,'')){out+=' <td class="best">'+(overviewValArr[indexOverview][carItem])+'</td> ';}else if(true){out+=' <td>'+(overviewValArr[indexOverview][carItem])+'</td> ';}out+=' ';} } out+=' </tr> ';}out+=' ';} } out+=' </table> </div> <div class="ldrboard-cont" style="margin-top:1em;"> <div class="ad-container"> <div id="js_tile_1" class="ad"></div> </div> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Audio"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Audio" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Audio </h2> <div id="compareSection_Audio" class="compare-data-cont"> <table> ';var arr5=audioNameArr;if(arr5){var audioItem,indexAudio=-1,l5=arr5.length-1;while(indexAudio<l5){audioItem=arr5[indexAudio+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(audioItem)+'</div></th> ';var arr6=carsArr;if(arr6){var carItem,i6=-1,l6=arr6.length-1;while(i6<l6){carItem=arr6[i6+=1];out+=' <td>'+(audioValArr[indexAudio][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Comfort"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Comfort" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Comfort </h2> <div id="compareSection_Comfort" class="compare-data-cont"> <table> ';var arr7=comfortNameArr_1;if(arr7){var comfortItem,indexComfort=-1,l7=arr7.length-1;while(indexComfort<l7){comfortItem=arr7[indexComfort+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(comfortItem)+'</div></th> ';var arr8=carsArr;if(arr8){var carItem,i8=-1,l8=arr8.length-1;while(i8<l8){carItem=arr8[i8+=1];out+=' <td>'+(comfortValArr_1[indexComfort][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' ';var arr9=comfortNameArr_2;if(arr9){var comfortItem,indexComfort=-1,l9=arr9.length-1;while(indexComfort<l9){comfortItem=arr9[indexComfort+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(comfortItem)+'</div></th> ';var arr10=carsArr;if(arr10){var carItem,i10=-1,l10=arr10.length-1;while(i10<l10){carItem=arr10[i10+=1];out+=' <td>'+(comfortValArr_2[indexComfort][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' ';var arr11=comfortNameArr_3;if(arr11){var comfortItem,indexComfort=-1,l11=arr11.length-1;while(indexComfort<l11){comfortItem=arr11[indexComfort+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(comfortItem)+'</div></th> ';var arr12=carsArr;if(arr12){var carItem,i12=-1,l12=arr12.length-1;while(i12<l12){carItem=arr12[i12+=1];out+=' <td>'+(comfortValArr_3[indexComfort][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' ';var arr13=comfortNameArr_4;if(arr13){var comfortItem,indexComfort=-1,l13=arr13.length-1;while(indexComfort<l13){comfortItem=arr13[indexComfort+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(comfortItem)+'</div></th> ';var arr14=carsArr;if(arr14){var carItem,i14=-1,l14=arr14.length-1;while(i14<l14){carItem=arr14[i14+=1];out+=' <td>'+(comfortValArr_4[indexComfort][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Dimensions"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Dimensions" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Dimensions </h2> <div id="compareSection_Dimensions" class="compare-data-cont"> <table> ';var arr15=dimNameArr;if(arr15){var dimItem,indexDim=-1,l15=arr15.length-1;while(indexDim<l15){dimItem=arr15[indexDim+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(dimItem)+'</div></th> ';var arr16=carsArr;if(arr16){var carItem,i16=-1,l16=arr16.length-1;while(i16<l16){carItem=arr16[i16+=1];out+=' <td>'+(dimValArr[indexDim][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Engine"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Engine" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Engine </h2> <div id="compareSection_Engine" class="compare-data-cont"> <table> ';var arr17=engineNameArr;if(arr17){var engineItem,indexEngine=-1,l17=arr17.length-1;while(indexEngine<l17){engineItem=arr17[indexEngine+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(engineItem)+'</div></th> ';var arr18=carsArr;if(arr18){var carItem,i18=-1,l18=arr18.length-1;while(i18<l18){carItem=arr18[i18+=1];out+=' <td>'+(engineValArr[indexEngine][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Fuel-Economy"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Fuel-Economy" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Fuel Economy </h2> <div id="compareSection_Fuel-Economy" class="compare-data-cont"> <table> ';var arr19=feconNameArr;if(arr19){var feconItem,indexFecon=-1,l19=arr19.length-1;while(indexFecon<l19){feconItem=arr19[indexFecon+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(feconItem)+'</div></th> ';var arr20=carsArr;if(arr20){var carItem,i20=-1,l20=arr20.length-1;while(i20<l20){carItem=arr20[i20+=1];out+=' <td>'+(feconValArr[indexFecon][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Gauges"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Gauges" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Gauges </h2> <div id="compareSection_Gauges" class="compare-data-cont"> <table> ';var arr21=gaugeNameArr;if(arr21){var gaugeItem,indexGauge=-1,l21=arr21.length-1;while(indexGauge<l21){gaugeItem=arr21[indexGauge+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(gaugeItem)+'</div></th> ';var arr22=carsArr;if(arr22){var carItem,i22=-1,l22=arr22.length-1;while(i22<l22){carItem=arr22[i22+=1];out+=' <td>'+(gaugeValArr[indexGauge][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Lights"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Lights" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Lights </h2> <div id="compareSection_Lights" class="compare-data-cont"> <table> ';var arr23=lightsNameArr;if(arr23){var lightsItem,indexLights=-1,l23=arr23.length-1;while(indexLights<l23){lightsItem=arr23[indexLights+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(lightsItem)+'</div></th> ';var arr24=carsArr;if(arr24){var carItem,i24=-1,l24=arr24.length-1;while(i24<l24){carItem=arr24[i24+=1];out+=' <td>'+(lightsValArr[indexLights][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Performance"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Performance" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Performance </h2> <div id="compareSection_Performance" class="compare-data-cont"> <table> ';var arr25=perfNameArr;if(arr25){var perfItem,indexPerf=-1,l25=arr25.length-1;while(indexPerf<l25){perfItem=arr25[indexPerf+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(perfItem)+'</div></th> ';var arr26=carsArr;if(arr26){var carItem,i26=-1,l26=arr26.length-1;while(i26<l26){carItem=arr26[i26+=1];out+=' <td>'+(perfValArr[indexPerf][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Safety"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Safety" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Safety </h2> <div id="compareSection_Safety" class="compare-data-cont"> <table> ';var arr27=safetyNameArr;if(arr27){var safetyItem,indexSafety=-1,l27=arr27.length-1;while(indexSafety<l27){safetyItem=arr27[indexSafety+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(safetyItem)+'</div></th> ';var arr28=carsArr;if(arr28){var carItem,i28=-1,l28=arr28.length-1;while(i28<l28){carItem=arr28[i28+=1];out+=' <td>'+(safetyValArr[indexSafety][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <h2 class="compare-grp-head"> <a class="js_toggle_comp_section" data-section="Wheels"> <span class="icon inline"> <svg> <use id="compareSectionSvg_Wheels" xlink:href="/assets/svg/global-sprite.svg#i_minus"></use> </svg> </span> </a> Wheels & Tires </h2> <div id="compareSection_Wheels" class="compare-data-cont"> <table> ';var arr29=wheelsNameArr_1;if(arr29){var wheelsItem,indexWheels=-1,l29=arr29.length-1;while(indexWheels<l29){wheelsItem=arr29[indexWheels+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(wheelsItem)+'</div></th> ';var arr30=carsArr;if(arr30){var carItem,i30=-1,l30=arr30.length-1;while(i30<l30){carItem=arr30[i30+=1];out+=' <td>'+(wheelsValArr_1[indexWheels][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' ';var arr31=wheelsNameArr_2;if(arr31){var wheelsItem,indexWheels=-1,l31=arr31.length-1;while(indexWheels<l31){wheelsItem=arr31[indexWheels+=1];out+=' <tr class="js_row_filler"> <th class="rowhead"><div class="th-filler">'+(wheelsItem)+'</div></th> ';var arr32=carsArr;if(arr32){var carItem,i32=-1,l32=arr32.length-1;while(i32<l32){carItem=arr32[i32+=1];out+=' <td>'+(wheelsValArr_2[indexWheels][carItem])+'</td> ';} } out+=' </tr> ';} } out+=' </table> </div> <div class="ad-container"> <div id="js_tile_4" class="ad"></div> </div></div>';return out;
};module.exports.compare_no_data=function anonymous(it
/**/) {
var out='<div class="cell primary"> <div class="section-pad"> <div class="compare-head-cont"> <table> <tr> <th class="rowhead"> <button class="btn-primary add-car js_add_compare_car" style="top: 3px;">Add a Car</button> </th> </tr> </table> </div> </div></div>';return out;
};module.exports.model_select_options=function anonymous(it
/**/) {
var out='<option value="">Select a Model</option>';var arr1=it.modelArr;if(arr1){var modelItem,midx=-1,l1=arr1.length-1;while(midx<l1){modelItem=arr1[midx+=1];out+='<option value="'+(modelItem.seo_name)+'">'+(modelItem.name)+'</option>';} } return out;
};module.exports.trim_select_options=function anonymous(it
/**/) {
var out='<option value="">Select a Vehicle</option>';var arr1=it.trimArr;if(arr1){var trimItem,midx=-1,l1=arr1.length-1;while(midx<l1){trimItem=arr1[midx+=1];out+='<option value="'+(trimItem.id)+'">'+(trimItem.year)+' '+(trimItem.name)+'</option>';} } return out;
};